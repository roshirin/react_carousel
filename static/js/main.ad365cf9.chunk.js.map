{"version":3,"sources":["components/CarouselItem/CarouselItem.tsx","components/Carousel/Carousel.tsx","components/Controls/Controls.tsx","App.tsx","index.tsx"],"names":["CarouselItem","imageSrc","index","width","className","src","alt","Carousel","images","itemWidth","sliderWidth","transform","transition","onSlideForward","onSlideBackward","isDecDisabled","isIncDisabled","isAnimationDisabled","type","disabled","onClick","style","map","Math","random","Controls","frameSize","step","animationDuration","infinite","onTextImputChange","onCheckInputChange","min","max","value","name","onChange","checked","prepareSlider","concat","length","App","useState","setItemWidth","setFrameSize","setStep","setAnimationDuration","setInfinite","setIsAnimationDisabled","setIsDecDisabled","setIsIncDisabled","preparedImages","initialTranslate","translate","setTranslate","maxTranslate","enableAnimation","disableAnimation","slideBackToMiddle","maxInfTranslate","currentValue","slideForward","a","nextStep","setTimeout","event","target","numberedValue","Number","newValue","Error","minInfTranslate","slideForwToMiddle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad365cf9.chunk.js","sourcesContent":["import './CarouselItem.scss';\n\ntype Props = {\n  imageSrc: string;\n  index: number;\n  width: number;\n};\n\nexport const CarouselItem: React.FC<Props> = ({\n  imageSrc,\n  index,\n  width,\n}) => (\n  <li className=\"list-item\">\n    <img\n      src={imageSrc}\n      alt={`${index + 1}`}\n      width={width}\n    />\n  </li>\n);\n","import React from 'react';\nimport './Carousel.scss';\nimport { CarouselItem } from '../CarouselItem/CarouselItem';\nimport { SliderWidth } from '../../types/SliderWidth';\nimport { Transform } from '../../types/Transform';\nimport { Transition } from '../../types/Transition';\n\ntype TranslateCallback = () => void;\n\ntype Props = {\n  images: string[];\n  itemWidth: number,\n  sliderWidth: SliderWidth,\n  transform: Transform,\n  transition: Transition,\n  onSlideForward: TranslateCallback,\n  onSlideBackward: TranslateCallback,\n  isDecDisabled: boolean,\n  isIncDisabled: boolean,\n  isAnimationDisabled: boolean,\n};\n\nexport const Carousel: React.FC<Props> = ({\n  images,\n  itemWidth,\n  sliderWidth,\n  transform,\n  transition,\n  onSlideForward,\n  onSlideBackward,\n  isDecDisabled,\n  isIncDisabled,\n  isAnimationDisabled,\n}) => {\n  return (\n    <div className=\"Carousel\">\n      <button\n        className=\"Carousel__arrowbutton\"\n        type=\"button\"\n        disabled={isDecDisabled}\n        onClick={onSlideBackward}\n      >\n        &#10096;\n      </button>\n\n      <div\n        className=\"Carousel__wrapper\"\n        style={sliderWidth}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={!isAnimationDisabled\n            ? { ...transform, ...transition }\n            : transform}\n        >\n          {images.map((imageSrc, index) => (\n            <CarouselItem\n              imageSrc={imageSrc}\n              index={index}\n              width={itemWidth}\n              key={Math.random()}\n            />\n          ))}\n        </ul>\n      </div>\n\n      <button\n        className=\"Carousel__arrowbutton\"\n        type=\"button\"\n        onClick={onSlideForward}\n        disabled={isIncDisabled}\n        data-cy=\"next\"\n      >\n        &#10097;\n      </button>\n    </div>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport './Controls.scss';\n\ntype Props = {\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n  onTextImputChange: (event: ChangeEvent<HTMLInputElement>) => void,\n  onCheckInputChange: () => void,\n};\n\nexport const Controls: React.FC<Props> = ({\n  itemWidth,\n  frameSize,\n  step,\n  animationDuration,\n  infinite,\n  onTextImputChange,\n  onCheckInputChange,\n}) => {\n  return (\n    <div className=\"controls\">\n      <label className=\"App__input-label\">\n        {'Enter image width: '}\n        <input\n          type=\"number\"\n          min=\"65\"\n          max=\"1300\"\n          step=\"65\"\n          value={itemWidth}\n          name=\"item width\"\n          onChange={onTextImputChange}\n        />\n      </label>\n\n      <label className=\"App__input-label\">\n        {'Enter slider frame size: '}\n        <input\n          type=\"number\"\n          min=\"1\"\n          max=\"10\"\n          step=\"1\"\n          value={frameSize}\n          name=\"frame size\"\n          onChange={onTextImputChange}\n        />\n      </label>\n\n      <label className=\"App__input-label\">\n        {'Enter slider change step: '}\n        <input\n          type=\"number\"\n          min=\"0\"\n          max=\"10\"\n          step=\"1\"\n          value={step}\n          name=\"slider step\"\n          onChange={onTextImputChange}\n        />\n      </label>\n\n      <label className=\"App__input-label\">\n        {'Enter animation duration: '}\n        <input\n          type=\"number\"\n          min=\"0\"\n          max=\"10000\"\n          step=\"250\"\n          name=\"animation duration\"\n          value={animationDuration}\n          onChange={onTextImputChange}\n        />\n      </label>\n\n      <label className=\"App__input-label\">\n        {'Choose if the slider should be infinite: '}\n        <input\n          type=\"checkbox\"\n          checked={infinite}\n          onChange={onCheckInputChange}\n        />\n      </label>\n    </div>\n  );\n};\n","import React, { useState, ChangeEvent } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel/Carousel';\nimport { Controls } from './components/Controls/Controls';\n\nconst images = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\ntype PrepareSlider = (\n  itemWidth: number,\n  infinite: boolean,\n) => [string[], number];\n\nconst prepareSlider: PrepareSlider = (\n  itemWidth,\n  infinite,\n) => {\n  if (!infinite) {\n    return [images, 0];\n  }\n\n  const preparedImages = images.concat(images, images);\n\n  const initialTranslate = images.length * itemWidth;\n\n  return [\n    preparedImages,\n    initialTranslate,\n  ];\n};\n\nconst minSlideWIdth = 65;\n\nexport const App: React.FC = () => {\n  const [itemWidth, setItemWidth] = useState(130);\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [infinite, setInfinite] = useState(false);\n  const [isAnimationDisabled, setIsAnimationDisabled] = useState(false);\n  const [isDecDisabled, setIsDecDisabled] = useState(true);\n  const [isIncDisabled, setIsIncDisabled] = useState(false);\n\n  let [preparedImages, initialTranslate] = prepareSlider(\n    itemWidth,\n    infinite,\n  );\n\n  const [translate, setTranslate] = useState(initialTranslate);\n\n  const maxTranslate = (images.length - frameSize) * itemWidth;\n\n  const sliderWidth = {\n    width: itemWidth * frameSize,\n  };\n  const transform = {\n    transform: `translateX(-${translate}px)`,\n  };\n  const transition = {\n    transition: `transform ${animationDuration}ms`,\n  };\n\n  const handleTextInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value, name } = event.target;\n\n    const numberedValue = Number(value);\n\n    switch (name) {\n      case 'item width':\n        setItemWidth(currentValue => {\n          let newValue = currentValue;\n\n          if (numberedValue < minSlideWIdth) {\n            newValue = minSlideWIdth;\n          }\n\n          return newValue;\n        });\n        break;\n\n      case 'frame size':\n        setFrameSize(numberedValue);\n\n        if (numberedValue >= images.length) {\n          setIsIncDisabled(true);\n        }\n\n        break;\n\n      case 'slider step':\n        setStep(numberedValue);\n        break;\n\n      case 'animation duration':\n        setAnimationDuration(numberedValue);\n        break;\n\n      default:\n        throw new Error('An error occured');\n    }\n  };\n\n  const enableAnimation = () => {\n    setIsAnimationDisabled(false);\n  };\n\n  const disableAnimation = () => {\n    setIsAnimationDisabled(true);\n  };\n\n  const handleInfiniteChange = () => {\n    setInfinite(currentValue => {\n      const newValue = !currentValue;\n\n      [preparedImages, initialTranslate] = prepareSlider(\n        itemWidth,\n        newValue,\n      );\n\n      setIsAnimationDisabled(true);\n      setTranslate(initialTranslate);\n\n      if (newValue) {\n        setIsDecDisabled(false);\n        setIsIncDisabled(false);\n      } else {\n        setIsDecDisabled(true);\n        setIsIncDisabled(false);\n      }\n\n      return newValue;\n    });\n  };\n\n  const slideBackToMiddle = () => {\n    const maxInfTranslate = images.length * 2 * itemWidth;\n\n    if (translate >= maxInfTranslate) {\n      disableAnimation();\n      setTranslate(currentValue => currentValue - images.length * itemWidth);\n    }\n  };\n\n  const slideForwToMiddle = () => {\n    const minInfTranslate = images.length * itemWidth;\n\n    if (translate <= minInfTranslate) {\n      disableAnimation();\n      setTranslate(currentValue => currentValue + images.length * itemWidth);\n    }\n  };\n\n  const slideForward = async () => {\n    if (!infinite) {\n      enableAnimation();\n\n      let nextStep = translate + itemWidth * step;\n\n      if (nextStep >= maxTranslate) {\n        nextStep = maxTranslate;\n        setIsIncDisabled(true);\n      }\n\n      setTranslate(nextStep);\n\n      if (nextStep > 0) {\n        setIsDecDisabled(false);\n      }\n\n      return;\n    }\n\n    // here the slider must go back without animation for 10 elements before continuing scrolling forward\n    // the problem is React merges both actions if I call the functions consecutively\n    // the only my desision for now is to call the second part in setTimeout. And it's bad\n    slideBackToMiddle();\n\n    setTimeout(() => {\n      enableAnimation();\n      setTranslate(currentValue => currentValue + itemWidth * step);\n    }, 0);\n  };\n\n  const slideBackward = () => {\n    if (!infinite) {\n      enableAnimation();\n\n      let nextStep = translate - itemWidth * step;\n\n      if (nextStep <= 0) {\n        nextStep = 0;\n        setIsDecDisabled(true);\n      }\n\n      setTranslate(nextStep);\n\n      if (nextStep < maxTranslate) {\n        setIsIncDisabled(false);\n      }\n\n      return;\n    }\n\n    // here the slider must go forward without animation for 10 elements before continuing scrolling backwards\n    // the problem is React merges both actions if I call the functions consecutively\n    // the only my desision for now is to call the second part in setTimeout. And it's bad\n    slideForwToMiddle();\n\n    setTimeout(() => {\n      enableAnimation();\n      setTranslate(currentValue => currentValue - itemWidth * step);\n    }, 0);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">\n        {`Carousel with ${images.length} images`}\n      </h1>\n\n      <Controls\n        itemWidth={itemWidth}\n        frameSize={frameSize}\n        step={step}\n        animationDuration={animationDuration}\n        infinite={infinite}\n        onTextImputChange={handleTextInputChange}\n        onCheckInputChange={handleInfiniteChange}\n      />\n\n      <Carousel\n        images={preparedImages}\n        itemWidth={itemWidth}\n        sliderWidth={sliderWidth}\n        transform={transform}\n        transition={transition}\n        onSlideForward={slideForward}\n        onSlideBackward={slideBackward}\n        isDecDisabled={isDecDisabled}\n        isIncDisabled={isIncDisabled}\n        isAnimationDisabled={isAnimationDisabled}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}